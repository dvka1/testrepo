 To push a file from our local repository to remote or github , Do the following :

--> 1st make a directory
--> put the file on it// eg: test.txt
--> inside the directory create alocal repo, otherwise git commands willnot get execute, git init
-->Then git add text.txt // it will go to working stage to staging stage
--> check git status.
--> Also commit the text./ git commit -m "commit message"
--> Then push our file to the remote git repository. so create a repository on github 1st://also we can create repository through our system//
-->Push file to remote repo: git push // git remote add test(filename) <url of the repository>
--> git push test
--> password: token // we can take the token from the githut settings -->developer settings-->personal access tokens-->generate token

---> Cloning:

-->we can clone from the github to our local system:
using--> git clone <'git hub url'>
--> if any changes: git add text.txt-->then commit
-->then push -->git push

---> using gh we can create the repository in github using our local terminal:
-->gh repo create

-->When we want to go back to history:
1st--> git log --oneline filename //shows every commit and its checksum//
--> git checkout <checksum> filename //go to that previous version.

-->git checkout HEAD filename// if the file removed and we need to go to the previous version 

--> if we want to change the commit message we can ammend it: git commit --amend -m "New commit message."

To modify a specific commit: For example, to modify commit bbc643cd, run:
--> git rebase --interactive 'bbc643cd^'. the caret ^ at the end of the command, because you need actually to rebase back to the commit before the one you wish to modify.

In the default editor, modify pick to edit in the line mentioning bbc643cd. Make your changes and then commit them with the command:
--> git commit --all --amend --no-edit

After that, return back to the previous HEAD commit using:

-->git rebase --continue

--> Branching:
git checkout -b remix // So for branching 1st we need to create a branch:
then add and commit all the current (master) file. then checkout master --> git checkout master.
git merge remix.// it will merge master with remix.

then checkout to remix --> git checkout remix// also add and commit all files in it. then second time we access the remix we need to merge all the content of master to the remix so, --> git merge master //

-->Tagging:

we can create tag by using :
--> git tag v1 //v1, tag name
--> to show tag // git show v1

Tags are ref's that point to specific points in Git history. Tagging is generally used to capture a point in history 

git collab check
